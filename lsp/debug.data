       
#(#! 
(lisp::in-package "SYSTEM")#! 
(lisp::import (lisp::quote sloop::sloop))
#(system::*break-env* lisp::*debug-io* "~%~9a: ~s" "~%~9a: ~s" (lisp::lambda lisp::lambda-block) system::|| :test lisp::equal "~%Search for ~a failed" system::*current-ihs* system::*debug-print-level* lisp::*print-level* lisp::*print-circle* lisp::*print-length* system::debug ">> ~a():" "~%Local~a(~a): ~a" "~%Local(~d): ~a" 2147483646 "~%Which case is this??" "Not in current function" lisp::prog1 lisp::setf system::mv-ref system::set-mv system::instream system::*stream-alist* :stream system::*at-newline* #\( :all system::*quotation-reader* #\Newline #\! lisp::*readtable* system::*standard-readtable* :line system::*old-semicolon-reader* system::*line-info-readtable* #\; system::left-parenthesis-reader #\" system::quotation-reader system::*record-line-info* system::*left-parenthesis-reader* lisp::lambda system::*fun-array* 2147483647 system::line-info :initial-element :blank-line system::break-points system::*break-points* :delete :break system::*last-dbl-break* system::*break-point-vector* system::*break-step* system::break-step-into :resume system::*step-next* system::break-step-next :key lisp::car "Bkpt ~a:" "~a has no line information" "~%No line info for ~a" "~%line out of bounds for ~a" lisp::lambda-block "~%Beyond code for ~a " #\/ :from-end "Bkpt ~a:(~a line ~a)~@[(disabled)~]" "(line ~a of ~a)" system::*display-string* "~s=~s~@[,~]" lisp::*print-pretty* lisp::*print-case* :downcase "{" "..." "}" system::*ihs-base* system::dbl-invisible system::*ihs-top* "" "~a~@[~d~]=~s~@[,~]" system::loc (lisp::lambda-block lisp::lambda) "~a:~a:0:beg~%" "~&#~d  ~@[~a~] ~a ~@[~a~] " "Computing args for " system::display-env system::display-compiled-env "(~a line ~a)" "[ihs=~a]" lisp::*break-enable* lisp::*error-output* system::*null-io* :<error> lisp::evalhook lisp::quote system::*no-prompt* "~a:~a:0:beg~%" "(~a line ~a) " system::*step-display* "(~s=~s)" system::break-previous system::ihs-vs system::vs system::ihs-top sloop::type-error system::ihs-fun system::compiled-function-name lisp::search system::break-go system::break-locals system::show-environment system::break-level :stream-name system::closedp lisp::delete system::make-instream system::get-instream lisp::count lisp::read-from-string system::newline system::new-semi-colon-reader system::cleanup system::setup-lineinfo lisp::load system::instream-name lisp::vector-push-extend system::walk-through lisp::make-array system::make-break-point system::iterate-over-bkpts system::stream-name system::ihs-fname system::init-break-points system::current-step-fun lisp::position system::maybe-break system::dwim system::break-function system::insert-break-point system::show-break-point system::short-name system::relative-line :enable :disable :show system::get-next-visible-fun system::dbl-what-frame system::nth-stack-frame system::set-env system::print-stack-frame system::get-line-of-form system::ihs-not-interpreted-env system::next-stack-frame system::vs-top system::computing-args-p system::apply-display-fun system::error-set system::safe-eval (system::%init . #((system::warn-version 0) (system::mf (lisp::quote system::show-break-variables) 0) (system::mfsfun (lisp::quote system::show-environment) 1 1) (system::putprop :a (lisp::quote system::show-break-variables) (lisp::quote system::break-command)) (system::mf (lisp::quote system::search-stack) 2) (system::*make-special (lisp::quote system::*debug-print-level*)) (lisp::or (lisp::boundp (lisp::quote system::*debug-print-level*)) (lisp::setq system::*debug-print-level* 3)) (system::mf (lisp::quote system::break-locals) 3) (system::mf (lisp::quote system::loc) 4) (system::putprop :bl (lisp::quote system::break-locals) (lisp::quote system::break-command)) (system::putprop :s (lisp::quote system::search-stack) (lisp::quote system::break-command)) (system::*make-special (lisp::quote system::*record-line-info*)) (lisp::or (lisp::boundp (lisp::quote system::*record-line-info*)) (lisp::setq system::*record-line-info* (lisp::make-hash-table :test (lisp::quote lisp::eq)))) (system::*make-special (lisp::quote system::*at-newline*)) (lisp::or (lisp::boundp (lisp::quote system::*at-newline*)) (lisp::setq system::*at-newline* lisp::nil)) (system::*make-special (lisp::quote system::*standard-readtable*)) (lisp::or (lisp::boundp (lisp::quote system::*standard-readtable*)) (lisp::setq system::*standard-readtable* lisp::*readtable*)) (system::*make-special (lisp::quote system::*line-info-readtable*)) (lisp::or (lisp::boundp (lisp::quote system::*line-info-readtable*)) (lisp::setq system::*line-info-readtable* (lisp::copy-readtable))) (system::*make-special (lisp::quote system::*left-parenthesis-reader*)) (lisp::or (lisp::boundp (lisp::quote system::*left-parenthesis-reader*)) (lisp::setq system::*left-parenthesis-reader* (lisp::get-macro-character #\())) (system::*make-special (lisp::quote system::*quotation-reader*)) (lisp::or (lisp::boundp (lisp::quote system::*quotation-reader*)) (lisp::setq system::*quotation-reader* (lisp::get-macro-character #\"))) (system::*make-special (lisp::quote system::*stream-alist*)) (lisp::or (lisp::boundp (lisp::quote system::*stream-alist*)) (lisp::setq system::*stream-alist* lisp::nil)) (system::*make-special (lisp::quote system::*break-point-vector*)) (lisp::or (lisp::boundp (lisp::quote system::*break-point-vector*)) (lisp::setq system::*break-point-vector* (lisp::make-array 10 :fill-pointer 0 :adjustable lisp::t))) (system::*make-special (lisp::quote system::*step-next*)) (lisp::or (lisp::boundp (lisp::quote system::*step-next*)) (lisp::setq system::*step-next* lisp::nil)) (system::*make-special (lisp::quote system::*last-dbl-break*)) (lisp::or (lisp::boundp (lisp::quote system::*last-dbl-break*)) (lisp::setq system::*last-dbl-break* lisp::nil)) (system::mm (lisp::quote system::mv-setq) 5) (system::mm (lisp::quote system::mv-values) 6) (system::mf (lisp::quote system::dbl) 7) (system::define-structure (lisp::quote system::instream) (lisp::quote system::instream-) (lisp::quote lisp::nil) (lisp::quote lisp::nil) (lisp::quote ((lisp::stream lisp::nil lisp::t lisp::nil 0) (system::line 0 lisp::fixnum lisp::nil 1) (system::stream-name lisp::nil lisp::t lisp::nil 2))) (lisp::quote system::copy-instream) (lisp::quote lisp::nil) (lisp::quote lisp::nil) (lisp::quote lisp::nil) (lisp::quote (system::make-instream)) (lisp::quote 3) (lisp::quote system::instream-p) (lisp::quote lisp::nil)) (system::mf (lisp::quote system::make-instream) 8) (system::mf (lisp::quote system::cleanup) 9) (system::mf (lisp::quote system::get-instream) 10) (system::mf (lisp::quote system::newline) 11) (system::mf (lisp::quote system::quotation-reader) 12) (system::*make-special (lisp::quote system::*old-semicolon-reader*)) (lisp::or (lisp::boundp (lisp::quote system::*old-semicolon-reader*)) (lisp::setq system::*old-semicolon-reader* (lisp::get-macro-character #\;))) (system::mf (lisp::quote system::new-semi-colon-reader) 13) (system::mf (lisp::quote system::setup-lineinfo) 14) (system::mf (lisp::quote system::nload) 15) (system::mf (lisp::quote system::left-parenthesis-reader) 16) (system::*make-special (lisp::quote system::*fun-array*)) (lisp::or (lisp::boundp (lisp::quote system::*fun-array*)) (lisp::setq system::*fun-array* (lisp::make-array 50 :fill-pointer 0 :adjustable lisp::t))) (system::mf (lisp::quote system::walk-through) 17) (system::mf (lisp::quote compiler::compiler-def-hook) 18) (system::mf (lisp::quote system::instream-name) 19) (system::mf (lisp::quote system::stream-name) 20) (system::mf (lisp::quote system::closedp) 21) (system::mf (lisp::quote system::find-line-in-fun) 22) (system::mf (lisp::quote system::current-step-fun) 23) (system::mf (lisp::quote system::init-break-points) 24) (system::mf (lisp::quote system::step-into) 25) (system::mf (lisp::quote system::step-next) 26) (system::mf (lisp::quote system::maybe-break) 27) (system::mf (lisp::quote system::break-step-into) 28) (system::mf (lisp::quote system::break-step-next) 29) (system::sputprop :next (lisp::quote system::break-command) (lisp::quote system::step-next)) (system::sputprop :step (lisp::quote system::break-command) (lisp::quote system::step-into)) (system::sputprop :loc (lisp::quote system::break-command) (lisp::quote system::loc)) (system::mf (lisp::quote system::*break-points*) 30) (system::mf (lisp::quote system::dwim) 31) (system::mf (lisp::quote system::break-function) 32) (system::mf (lisp::quote system::insert-break-point) 33) (system::mf (lisp::quote system::short-name) 34) (system::mf (lisp::quote system::show-break-point) 35) (system::mf (lisp::quote system::iterate-over-bkpts) 36) (system::sputprop :info (lisp::quote system::break-command) (lisp::quote (lisp::lambda (lisp::type) (lisp::case lisp::type (:bkpt (system::iterate-over-bkpts lisp::nil :show)) (lisp::otherwise (lisp::format lisp::t "usage: :info :bkpt -- show breakpoints")))))) (system::sputprop :delete (lisp::quote system::break-command) (lisp::quote (lisp::lambda (lisp::&rest system::l) (system::iterate-over-bkpts system::l :delete) (lisp::values)))) (system::sputprop :disable (lisp::quote system::break-command) (lisp::quote (lisp::lambda (lisp::&rest system::l) (system::iterate-over-bkpts system::l :disable) (lisp::values)))) (system::sputprop :enable (lisp::quote system::break-command) (lisp::quote (lisp::lambda (lisp::&rest system::l) (system::iterate-over-bkpts system::l :enable) (lisp::values)))) (system::sputprop :break (lisp::quote system::break-command) (lisp::quote (lisp::lambda (lisp::&rest system::l) (lisp::print system::l) (lisp::cond (system::l (lisp::apply (lisp::quote system::break-function) system::l)) (system::*last-dbl-break* (lisp::let ((system::fun (lisp::nth 3 system::*last-dbl-break*))) (system::break-function system::fun (lisp::nth 2 system::*last-dbl-break*) lisp::t))))))) (system::sputprop :fr (lisp::quote system::break-command) (lisp::quote (lisp::lambda (lisp::&rest system::l) (system::dbl-up (lisp::or (lisp::car system::l) 0) system::*ihs-top*) (lisp::values)))) (system::sputprop :up (lisp::quote system::break-command) (lisp::quote (lisp::lambda (lisp::&rest system::l) (system::dbl-up (lisp::or (lisp::car system::l) 1) system::*current-ihs*) (lisp::values)))) (system::sputprop :down (lisp::quote system::break-command) (lisp::quote (lisp::lambda (lisp::&rest system::l) (system::dbl-up (lisp::- (lisp::or (lisp::car system::l) 1)) system::*current-ihs*) (lisp::values)))) (system::*make-special (lisp::quote system::*display-string*)) (lisp::or (lisp::boundp (lisp::quote system::*display-string*)) (lisp::setq system::*display-string* (lisp::make-array 100 :element-type (lisp::quote lisp::string-char) :fill-pointer 0 :adjustable lisp::t))) (system::mf (lisp::quote system::display-env) 37) (system::mf (lisp::quote system::apply-display-fun) 38) (system::sputprop :bt (lisp::quote system::break-command) (lisp::quote system::dbl-backtrace)) (system::sputprop (lisp::quote system::*break-points*) (lisp::quote system::dbl-invisible) lisp::t) (system::mf (lisp::quote system::get-line-of-form) 39) (system::mf (lisp::quote system::get-next-visible-fun) 40) (system::mf (lisp::quote system::dbl-what-frame) 41) (system::mf (lisp::quote system::dbl-up) 42) (lisp::block lisp::nil (lisp::let* ((#0=#:lim1162 (lisp::quote (system::break-level system::universal-error-handler system::terminal-interrupt system::break-level lisp::evalhook system::find-line-in-fun))) (system::v (lisp::car #0#))) (lisp::tagbody #1=#:lim1163 (lisp::if (lisp::endp #0#) (lisp::return (lisp::progn lisp::nil))) (lisp::tagbody (lisp::setf (lisp::get system::v (lisp::quote system::dbl-invisible)) lisp::t)) (lisp::setq #0# (lisp::cdr #0#) system::v (lisp::car #0#)) (lisp::go #1#)))) (system::mf (lisp::quote system::next-stack-frame) 43) (system::mf (lisp::quote system::nth-stack-frame) 44) (system::mf (lisp::quote system::dbl-backtrace) 45) (system::mf (lisp::quote system::display-compiled-env) 46) (system::mf (lisp::quote system::computing-args-p) 47) (system::mf (lisp::quote system::print-stack-frame) 48) (system::mf (lisp::quote system::make-break-point) 49) (system::mf (lisp::quote system::relative-line) 50) (system::*make-special (lisp::quote system::*step-display*)) (lisp::or (lisp::boundp (lisp::quote system::*step-display*)) (lisp::setq system::*step-display* lisp::nil)) (system::*make-special (lisp::quote system::*null-io*)) (lisp::or (lisp::boundp (lisp::quote system::*null-io*)) (lisp::setq system::*null-io* (lisp::make-broadcast-stream))) (system::mf (lisp::quote system::safe-eval) 51) (system::*make-special (lisp::quote system::*no-prompt*)) (lisp::or (lisp::boundp (lisp::quote system::*no-prompt*)) (lisp::setq system::*no-prompt* lisp::nil)) (system::mf (lisp::quote system::set-back) 52) (lisp::setq lisp::*features* (lisp::adjoin :sdebug lisp::*features*)))))
)
