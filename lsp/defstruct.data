       
#(#! 
(lisp::in-package (lisp::quote user::lisp))#! 
(lisp::export (lisp::quote lisp::defstruct))#! 
(lisp::in-package (lisp::quote lisp::system))#! 
(lisp::in-package (lisp::quote lisp::system))
#(system::*accessors* system::*list-accessors* system::*vector-accessors* lisp::defun (lisp::t) "~a is not a structure" system::structure-access system::struct-read-only system::setf-update-fn system::setf-lambda system::setf-documentation lisp::quote lisp::&aux lisp::nil lisp::&optional lisp::&rest :key lisp::&key system::make-structure lisp::vector lisp::list "~S is an illegal structure type" "An illegal BOA constructor." "The structure should be named." (system::x) lisp::and (lisp::vectorp system::x) lisp::> (lisp::the lisp::fixnum (lisp::length system::x)) lisp::eq lisp::aref (lisp::the (lisp::vector lisp::t) system::x) "The structure should be named." (system::x) (lisp::consp system::x) (lisp::car system::x) (system::x) lisp::do system::i (lisp::1- system::i) (system::y system::x (lisp::cdr system::y)) (lisp::= system::i 0) (lisp::consp system::y) (lisp::car system::y) ((lisp::declare (lisp::fixnum system::i)) (lisp::unless (lisp::consp system::y) (lisp::return lisp::nil))) "~S is an illegal structure type." "~S is an illegal structure slot option." "~S is an illegal structure slot option." "~S is an illegal include slot-description." "Type mismmatch for included slot ~a" :element-type lisp::unsigned-char :static system::s-data "Included structure undefined ~a" system::*all-t-s-type* system::*standard-slot-positions* (lisp::signed-char lisp::unsigned-char system::short lisp::unsigned-short lisp::long-float lisp::bit) lisp::unsigned-short (lisp::t) lisp::fixnum " ~a was frozen but now included" :name :length :raw :slot-position :size :has-holes :staticp :includes :print-function :slot-descriptions :constructors :offset :type :named :documentation :conc-name "not replacing s-data property" system::structure-documentation (lisp::t) compiler::co1 compiler::co1structure-predicate system::struct-predicate "-" "MAKE-" "COPY-" "-P" "" "~S is an illegal included structure." lisp::function "~S is an illegal defstruct option." "~S is an illegal defstruct option." "~S is an illegal structure include." "Contradictory constructor options." "__si::" "~S is an illegal structure predicate." "A print function is supplied to a typed structure." lisp::progn system::define-structure "structure ~a is changing" lisp::*read-suppress* "An extra argument was supplied for the #S readmacro." "~S is not a structure." "The structure ~S has no structure constructor." lisp::keyword system::string-concatenate lisp::adjust-array system::record-fn lisp::subtypep system::illegal-boa lisp::nil :read-only lisp::car system::best-array-element-type system::normalize-type system::overwrite-slot-descriptions lisp::make-array system::alignment system::aet-type lisp::typep lisp::coerce system::round-up system::size-of system::make-access-function system::copy-structure lisp::copy-list lisp::copy-seq system::make-t-type system::make-s-data-structure lisp::warn system::get-slot-pos system::make-s-data system::check-s-data :constructor :copier :predicate :include :initial-offset system::parse-slot-description system::make-constructor system::make-predicate 0 :frozen :included system::structure-subtype-p system::structure-ref1 (system::%init . #((system::setvv 111 (system::mc lisp::nil 16)) (system::warn-version 0) (lisp::proclaim (lisp::quote (lisp::optimize (lisp::safety 2) (lisp::space 3)))) (system::*make-special (lisp::quote system::*accessors*)) (lisp::or (lisp::boundp (lisp::quote system::*accessors*)) (lisp::setq system::*accessors* (lisp::make-array 10 :adjustable lisp::t))) (system::*make-special (lisp::quote system::*list-accessors*)) (lisp::or (lisp::boundp (lisp::quote system::*list-accessors*)) (lisp::setq system::*list-accessors* (lisp::make-array 2 :adjustable lisp::t))) (system::*make-special (lisp::quote system::*vector-accessors*)) (lisp::or (lisp::boundp (lisp::quote system::*vector-accessors*)) (lisp::setq system::*vector-accessors* (lisp::make-array 2 :adjustable lisp::t))) (lisp::or (lisp::fboundp (lisp::quote system::record-fn)) (lisp::setf (lisp::symbol-function (lisp::quote system::record-fn)) (lisp::function (lisp::lambda (lisp::&rest system::l) system::l lisp::nil)))) (system::mfvfun (lisp::quote system::make-access-function) 0 3083) (system::setvv 13 lisp::lambda-list-keywords) (system::mfsfun (lisp::quote system::make-constructor) 1 5) (system::mfsfun (lisp::quote system::illegal-boa) 2 0) (system::mfsfun (lisp::quote system::make-predicate) 3 5) (system::mfsfun (lisp::quote system::parse-slot-description) 4 2) (system::mfsfun (lisp::quote system::overwrite-slot-descriptions) 5 2) (system::*make-special (lisp::quote system::*all-t-s-type*)) (lisp::or (lisp::boundp (lisp::quote system::*all-t-s-type*)) (lisp::setq system::*all-t-s-type* (lisp::make-array 50 :element-type (lisp::quote lisp::unsigned-char) :static lisp::t))) (system::mfsfun (lisp::quote system::make-t-type) 6 3) (system::*make-special (lisp::quote system::*standard-slot-positions*)) (lisp::or (lisp::boundp (lisp::quote system::*standard-slot-positions*)) (lisp::setq system::*standard-slot-positions* (lisp::let ((system::ar (lisp::make-array 50 :element-type (lisp::quote lisp::unsigned-short) :static lisp::t))) (lisp::dotimes (system::i 50) (lisp::declare (lisp::fixnum system::i)) (lisp::setf (lisp::aref system::ar system::i) (lisp::* 4 system::i))) system::ar))) (system::mfsfun (lisp::quote system::round-up) 7 20738) (system::mfsfun (lisp::quote system::get-slot-pos) 8 3) (system::mfvfun (lisp::quote system::define-structure) 9 3596) (system::mm (lisp::quote lisp::defstruct) 10) (system::define-structure (lisp::quote system::s-data) (lisp::quote system::s-data-) (lisp::quote lisp::nil) (lisp::quote lisp::nil) (lisp::quote ((system::name lisp::nil lisp::nil lisp::nil 0) (lisp::length 0 lisp::fixnum lisp::nil 1) (system::raw lisp::nil lisp::nil lisp::nil 2) (system::included lisp::nil lisp::nil lisp::nil 3) (system::includes lisp::nil lisp::nil lisp::nil 4) (system::staticp lisp::nil lisp::nil lisp::nil 5) (system::print-function lisp::nil lisp::nil lisp::nil 6) (system::slot-descriptions lisp::nil lisp::nil lisp::nil 7) (system::slot-position lisp::nil lisp::nil lisp::nil 8) (system::size 0 lisp::fixnum lisp::nil 9) (system::has-holes lisp::nil lisp::nil lisp::nil 10) (system::frozen lisp::nil lisp::nil lisp::nil 11) (lisp::documentation lisp::nil lisp::nil lisp::nil 12) (system::constructors lisp::nil lisp::nil lisp::nil 13) (system::offset lisp::nil lisp::nil lisp::nil 14) (system::named lisp::nil lisp::nil lisp::nil 15) (lisp::type lisp::nil lisp::nil lisp::nil 16) (system::conc-name lisp::nil lisp::nil lisp::nil 17))) (lisp::quote system::copy-s-data) (lisp::quote lisp::nil) (lisp::quote lisp::nil) (lisp::quote lisp::nil) (lisp::quote (system::make-s-data)) (lisp::quote 18) (lisp::quote system::s-data-p) (lisp::quote lisp::nil)) (system::mfvfun-key (lisp::quote system::make-s-data) 11 9216 12) (system::mfsfun (lisp::quote system::check-s-data) 13 3) (system::mfsfun (lisp::quote system::freeze-defstruct) 14 1) (system::mf (lisp::quote system::sharp-s-reader) 15) (lisp::set-dispatch-macro-character #\# #\s (lisp::quote system::sharp-s-reader)) (lisp::set-dispatch-macro-character #\# #\S (lisp::quote system::sharp-s-reader)))))
)
