       
#(#! 
(lisp::in-package (lisp::quote user::lisp))#! 
(lisp::export (lisp::quote (lisp::describe lisp::inspect)))#! 
(lisp::in-package (lisp::quote lisp::system))
#(lisp::*query-io* #\Newline #\Return system::*inspect-mode* #\Space #\Tab #\n #\N #\s #\S #\p #\P lisp::*print-pretty* lisp::*print-level* lisp::*print-length* #\a #\A system::abort-inspect #\u #\U #\e #\E :level system::*old-print-level* :length system::*old-print-length* #\q #\Q system::quit-inspect "Inspect commands:~%~
		n (or N or Newline):	inspects the field (recursively).~%~
		s (or S):		skips the field.~%~
		p (or P):		pretty-prints the field.~%~
		a (or A):		aborts the inspection ~
					of the rest of the fields.~%~
		u (or U) form:		updates the field ~
					with the value of the form.~%~
		e (or E) form:		evaluates and prints the form.~%~
		q (or Q):		quits the inspection.~%~
		?:			prints this.~%~%" lisp::multiple-value-bind (system::update-flag system::new-value) system::read-inspect-command lisp::when system::update-flag lisp::setf system::new-value ((lisp::princ "Not updated.") (lisp::terpri)) (system::update-flag system::new-value) ((lisp::princ "Not updated.") (lisp::terpri)) "~V@T" system::*inspect-level* "~V@T" "~:@(~S~) - uninterned symbol" "KEYWORD" "~:@(~S~) - keyword" "~:@(~S~) - ~:[internal~;external~] symbol in ~A package" :external "value:" "value:~%   ~S" lisp::system system::compiler "property ~S:" "property ~:@(~S~):~%   ~~S" "~&-----------------------------------------------------------------------------~%" "~S - package" "nicknames:  ~S" "use list:  ~S" "used-by list:  ~S" "shadowing symbols:  ~S" "~S - standard character" "~S - string character" "~S - character" "code:  #x~X" "bits:  ~D" "font:  ~D" "~S - fixnum (32 bits)" "~S - bignum" "~S - ratio" "numerator:" "denominator:" "~S - complex" "real part:" "imaginary part:" "~S - short-float" "exponent:  ~D" "mantissa:  ~D" "~S - long-float" "exponent:  ~D" "mantissa:  ~D" "~S - function" "~S - constant" "~S - cons" "nthcdr ~D:" "nth ~D:" "~S - simple string" "~S - string" "dimension:  ~D" "fill pointer:  ~D" "aref ~D:" "~S - simple vector" "~S - vector" "dimension:  ~D" "fill pointer:  ~D" "aref ~D:" "~S - adjustable aray" "~S - array" "rank:  ~D" "dimensions:  ~D" "total size:  ~D" "Structure of type ~a ~%Byte:[Slot Type]Slot Name   :Slot Value" system::s-data "~%~4d:~@[[~s] ~]~20a:~s" system::*inspect-history* "~S - ~S" lisp::function "" "[Special form and Macro]" "[Special form]" "" "[Macro]" "~%Args: ~S" "~%Args: ~S" "~%Args: ~S" "~%Args: ~S" "" "" "[Function]" "[Macro or Function]" "KEYWORD" lisp::variable "" "[Constant]" "" "[Special variable]" "" "[Variable]" lisp::type "[Type]" system::deftype-form lisp::*package* "~%Defined as: ~S~%See the doc of DEFTYPE." "[Type]" lisp::structure "[Structure]" system::defstruct-form "~%Defined as: ~S~%See the doc of DEFSTRUCT." "[Structure]" "[Setf]" system::setf-update-fn "~%Defined as: ~S~%See the doc of DEFSETF." lisp::defsetf "[Setf]" system::setf-lambda "~%Defined as: ~S~%See the doc of DEFSETF." "[Setf]" system::setf-method "~@[~%Defined as: ~S~%See the doc of DEFINE-SETF-METHOD.~]" lisp::define-setf-method "[Setf]" "~&-----------------------------------------------------------------------------~%~53S~24@A~%~A" "LISP" "SYSTEM" system::my-lisp-doc "SI" "doc/DOC-keys.el" "doc/DOC" #\^_ "~&-----------------------------------------------------------------------------" "~&No documentation for ~:@(~S~)." system::lisp "~&-----------------------------------------------------------------------------" "~&No documentation for ~S in ~:[any~;~A~] package." system::inspect-indent-1 system::inspect-object system::inspect-indent system::inspect-read-line lisp::read-preserving-whitespace system::print-doc lisp::package-shadowing-symbols lisp::fixnum lisp::bignum lisp::ratio lisp::complex lisp::short-float lisp::single-float lisp::long-float lisp::double-float lisp::lambda lisp::lambda-block lisp::lambda-closure lisp::lambda-block-closure lisp::quote lisp::array-has-fill-pointer-p lisp::array-dimensions lisp::array-total-size system::structure-ref1 system::inspect-symbol system::inspect-package system::inspect-character system::inspect-number system::inspect-cons system::inspect-string system::inspect-vector system::inspect-array system::inspect-structure lisp::documentation system::src-path lisp::load lisp::open system::package-size system::substringp (system::%init . #((system::warn-version 625) (lisp::proclaim (lisp::quote (lisp::optimize (lisp::safety 2) (lisp::space 3)))) (system::*make-special (lisp::quote system::*inspect-level*)) (lisp::or (lisp::boundp (lisp::quote system::*inspect-level*)) (lisp::setq system::*inspect-level* 0)) (system::*make-special (lisp::quote system::*inspect-history*)) (lisp::or (lisp::boundp (lisp::quote system::*inspect-history*)) (lisp::setq system::*inspect-history* lisp::nil)) (system::*make-special (lisp::quote system::*inspect-mode*)) (lisp::or (lisp::boundp (lisp::quote system::*inspect-mode*)) (lisp::setq system::*inspect-mode* lisp::nil)) (system::*make-special (lisp::quote system::*old-print-level*)) (lisp::or (lisp::boundp (lisp::quote system::*old-print-level*)) (lisp::setq system::*old-print-level* lisp::nil)) (system::*make-special (lisp::quote system::*old-print-length*)) (lisp::or (lisp::boundp (lisp::quote system::*old-print-length*)) (lisp::setq system::*old-print-length* lisp::nil)) (system::mfsfun (lisp::quote system::inspect-read-line) 0 0) (system::mf (lisp::quote system::read-inspect-command) 1) (system::mm (lisp::quote system::inspect-recursively) 2) (system::mm (lisp::quote system::inspect-print) 3) (system::mfsfun (lisp::quote system::inspect-indent) 4 0) (system::mfsfun (lisp::quote system::inspect-indent-1) 5 0) (system::mfsfun (lisp::quote system::inspect-symbol) 6 1) (system::mfsfun (lisp::quote system::inspect-package) 7 1) (system::mfsfun (lisp::quote system::inspect-character) 8 1) (system::mfsfun (lisp::quote system::inspect-number) 9 1) (system::mfsfun (lisp::quote system::inspect-cons) 10 1) (system::mfsfun (lisp::quote system::inspect-string) 11 1) (system::mfsfun (lisp::quote system::inspect-vector) 12 1) (system::mfsfun (lisp::quote system::inspect-array) 13 1) (system::mfsfun (lisp::quote system::inspect-structure) 14 1) (system::mf (lisp::quote system::inspect-object) 15) (system::mf (lisp::quote lisp::describe) 16) (system::mf (lisp::quote lisp::inspect) 17) (system::mf (lisp::quote system::print-doc) 18) (system::mf (lisp::quote system::apropos-doc) 19))))
)
