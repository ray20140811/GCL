       
#(#! 
(lisp::in-package (lisp::quote user::lisp))#! 
(lisp::export (lisp::quote (lisp::+ lisp::++ lisp::+++ lisp::- lisp::* lisp::** lisp::*** lisp::/ lisp::// lisp::///)))#! 
(lisp::export (lisp::quote (lisp::break lisp::warn)))#! 
(lisp::export (lisp::quote lisp::*break-on-warnings*))#! 
(lisp::export (lisp::quote lisp::*break-enable*))#! 
(lisp::in-package (lisp::quote lisp::system))#! 
(lisp::export (lisp::quote system::*break-readtable*))#! 
(lisp::export (lisp::quote (system::loc system::*debug-print-level*)))#! 
(lisp::export (lisp::quote (system::vs system::ihs-vs system::ihs-fun system::frs-vs system::frs-bds system::frs-ihs system::bds-var system::bds-val system::super-go)))
#(lisp::+ lisp::++ lisp::+++ lisp::- lisp::* lisp::** lisp::*** lisp::/ lisp::// lisp::/// system::*lisp-initialized* system::*quit-tag* system::*system-directory* "sys-init.lsp" :verbose system::*multiply-stacks* "init.lsp" "init.lsp" system::*command-args* "-load" system::*top-level-hook* system::*no-prompt* "~%~a>" lisp::*package* system::user "" lisp::*standard-input* system::*top-eof* lisp::*evalhook* lisp::*applyhook* lisp::*error-output* #\Newline #\: "(" ")" system::*break-message* system::*quit-tags* system::*break-level* system::*ihs-base* system::*ihs-top* system::*current-ihs* system::*frs-base* system::*frs-top* system::*break-env* lisp::*break-enable* lisp::*readtable* system::*break-readtable* lisp::*read-suppress* system::*interrupt-enable* lisp::*debug-io* "~&~a~a>~{~*>~}" "" "dbl:" "" system::step-continue :resume lisp::*print-level* lisp::*print-length* lisp::*print-case* :upcase lisp::*break-on-warnings* "~&Warning: " system::*indent-formatted-output* lisp::*print-pretty* system::*debug-print-level* "~&Correctable error: " "Signalled by ~:@(~S~).~%" "Signalled by an anonymous function.~%" "~&If continued: " "~?~&" "~&Error: " lisp::*link-array* "Fast links are on: do (use-fast-links nil) for debugging~%" "Error signalled by ~:@(~S~).~%" "Error signalled by an anonymous function.~%" "~&Break: " "~&Break.~%" "" "Type :r to resume execution, or :q to quit to top level." "Console interrupt." "Console interrupt -- cannot continue." system::break-command "~&~S is undefined break command.~%" "Broken at ~:@(~S~).~:[  Type :H for Help.~;~]" "bad env" "~a~#[none~;~S~;~S and ~S~
         ~:;~@{~#[~;and ~]~S~^, ~}~].~%" "Local variables: " "Local functions: " "Local blocks: " lisp::block "Local tags: " lisp::tag "~&VS[~d]: ~s" "~&BDS[~d]: ~s = ~s" :stream :escape :case :downcase "~&~:[  ~;@ ~]IHS[~d]: ~s ---> VS[~d]" lisp::lambda (:zombi) :zombi "~&    FRS[~d]: ~s ---> IHS[~d],VS[~d],BDS[~d]" :key :test lisp::tagbody :test-not (lisp::***) system::block/tagbody lisp::catch lisp::quote (lisp::unwind-protect lisp::***) system::system-internal-catcher "Broken at ~:@(~S~)." "~&Top level." system::*break-hidden-packages* lisp::lambda-closure "~s is invalid tagbody identification for ~s." "Search for ~a failed.~%" "Search for ~a failed.~%" "
Break-loop Command Summary ([] indicates optional arg)
--------------------------

:bl [j]     show local variables and their values, or segment of vs if compiled
              in j stack frames starting at the current one.
:bt [n]     BACKTRACE [n steps]
:down [i]   DOWN i frames (one if no i)
:env        describe ENVIRONMENT of this stack frame (for interpreted).
:fr [n]     show frame n
:loc [i]    return i'th local of this frame if its function is compiled (si::loc i)
:r          RESUME (return from the current break loop).
:up [i]     UP i frames (one if no i)

Example: print a bactrace of the last 4 frames

>>:bt 4

Note:  (use-fast-links nil) makes all non system function calls
be recorded in the stack.   (use-fast-links t) is the default

Low level commands:
------------------
:p [i]           make current the i'th PREVIOUS frame (in list show by :b)
:n [i]           make current the i'th NEXT frame (in list show by :b)
:go [ihs-index]  make current the frame corresponding ihs-index
:m               print the last break message.
:c               show function of the current ihs frame.
:q [i]           quit to top level
:r               resume from this break loop.
:b               full backtrace of all functions and special forms.
:bs [name]       backward search for frame named 'name'
:fs  [name]      search for frame named 'name'
:vs [from] [to]  Show value stack between FROM and TO
:ihs [from] [to] Show Invocation History Stack
:bds ['v1 'v2 ..]Show previous special bindings of v1, v2,.. or all if no v1

" system::string-concatenate lisp::load lisp::read lisp::eval lisp::prin1 system::break-current lisp::make-string-input-stream system::ihs-top system::sch-frs-base system::frs-top system::simple-backtrace system::break-quit system::catch-fatal system::set-current system::set-back system::dbl-read system::break-call lisp::evalhook lisp::break system::break-level system::set-env system::ihs-visible system::ihs-fname system::break-previous system::ihs-vs system::print-ihs system::vs system::break-vs system::frs-bds system::bds-var system::print-frs system::bds-val system::frs-ihs system::ihs-fun lisp::lambda-block system::lambda-block-expanded lisp::lambda-block-closure system::frs-kind system::frs-vs system::frs-class :catch system::frs-tag system::spicep lisp::caddr lisp::eq lisp::remove :protect system::compiled-function-name system::ihs-not-interpreted-env system::list-delq system::internal-super-go lisp::search lisp::char-equal system::break-go (system::%init . #((system::warn-version 0) (system::*make-special (lisp::quote system::*command-args*)) (lisp::or (lisp::boundp (lisp::quote system::*command-args*)) (lisp::setq system::*command-args* lisp::nil)) (system::*make-special (lisp::quote lisp::+)) (system::*make-special (lisp::quote lisp::++)) (system::*make-special (lisp::quote lisp::+++)) (system::*make-special (lisp::quote lisp::-)) (system::*make-special (lisp::quote lisp::*)) (system::*make-special (lisp::quote lisp::**)) (system::*make-special (lisp::quote lisp::***)) (system::*make-special (lisp::quote lisp::/)) (system::*make-special (lisp::quote lisp:://)) (system::*make-special (lisp::quote lisp::///)) (system::*make-special (lisp::quote system::*lisp-initialized*)) (lisp::or (lisp::boundp (lisp::quote system::*lisp-initialized*)) (lisp::setq system::*lisp-initialized* lisp::nil)) (system::*make-special (lisp::quote system::*quit-tag*)) (lisp::or (lisp::boundp (lisp::quote system::*quit-tag*)) (lisp::setq system::*quit-tag* (lisp::cons lisp::nil lisp::nil))) (system::*make-special (lisp::quote system::*quit-tags*)) (lisp::or (lisp::boundp (lisp::quote system::*quit-tags*)) (lisp::setq system::*quit-tags* lisp::nil)) (system::*make-special (lisp::quote system::*break-level*)) (lisp::or (lisp::boundp (lisp::quote system::*break-level*)) (lisp::setq system::*break-level* (lisp::quote lisp::nil))) (system::*make-special (lisp::quote system::*break-env*)) (lisp::or (lisp::boundp (lisp::quote system::*break-env*)) (lisp::setq system::*break-env* lisp::nil)) (system::*make-special (lisp::quote system::*ihs-base*)) (lisp::or (lisp::boundp (lisp::quote system::*ihs-base*)) (lisp::setq system::*ihs-base* 1)) (system::*make-special (lisp::quote system::*ihs-top*)) (lisp::or (lisp::boundp (lisp::quote system::*ihs-top*)) (lisp::setq system::*ihs-top* 1)) (system::*make-special (lisp::quote system::*current-ihs*)) (lisp::or (lisp::boundp (lisp::quote system::*current-ihs*)) (lisp::setq system::*current-ihs* 1)) (system::*make-special (lisp::quote system::*frs-base*)) (lisp::or (lisp::boundp (lisp::quote system::*frs-base*)) (lisp::setq system::*frs-base* 0)) (system::*make-special (lisp::quote system::*frs-top*)) (lisp::or (lisp::boundp (lisp::quote system::*frs-top*)) (lisp::setq system::*frs-top* 0)) (system::*make-special (lisp::quote lisp::*break-enable*)) (lisp::or (lisp::boundp (lisp::quote lisp::*break-enable*)) (lisp::setq lisp::*break-enable* lisp::t)) (system::*make-special (lisp::quote system::*break-message*)) (lisp::or (lisp::boundp (lisp::quote system::*break-message*)) (lisp::setq system::*break-message* "")) (system::*make-special (lisp::quote lisp::*break-on-warnings*)) (lisp::or (lisp::boundp (lisp::quote lisp::*break-on-warnings*)) (lisp::setq lisp::*break-on-warnings* lisp::nil)) (system::*make-special (lisp::quote system::*break-readtable*)) (lisp::or (lisp::boundp (lisp::quote system::*break-readtable*)) (lisp::setq system::*break-readtable* lisp::nil)) (system::*make-special (lisp::quote system::*top-level-hook*)) (lisp::or (lisp::boundp (lisp::quote system::*top-level-hook*)) (lisp::setq system::*top-level-hook* lisp::nil)) (system::*make-special (lisp::quote system::*top-eof*)) (lisp::or (lisp::boundp (lisp::quote system::*top-eof*)) (lisp::setq system::*top-eof* (lisp::cons lisp::nil lisp::nil))) (system::*make-special (lisp::quote system::*no-prompt*)) (lisp::or (lisp::boundp (lisp::quote system::*no-prompt*)) (lisp::setq system::*no-prompt* lisp::nil)) (system::mfsfun (lisp::quote system::top-level) 0 0) (system::mf (lisp::quote system::dbl-read) 1) (system::mf (lisp::quote system::break-level) 2) (system::*make-special (lisp::quote system::*debug-print-level*)) (lisp::or (lisp::boundp (lisp::quote system::*debug-print-level*)) (lisp::setq system::*debug-print-level* 3)) (system::mfvfun (lisp::quote lisp::warn) 3 16385) (system::mfvfun (lisp::quote system::universal-error-handler) 4 16389) (system::mfvfun (lisp::quote lisp::break) 5 16384) (system::mfsfun (lisp::quote system::terminal-interrupt) 6 1) (system::mfsfun (lisp::quote system::break-call) 7 2) (system::mf (lisp::quote system::break-quit) 8) (system::mf (lisp::quote system::break-previous) 9) (system::mfsfun (lisp::quote system::set-current) 10 0) (system::mf (lisp::quote system::break-next) 11) (system::mf (lisp::quote system::break-go) 12) (system::mf (lisp::quote system::break-message) 13) (system::mf (lisp::quote system::describe-environment) 14) (system::mf (lisp::quote system::break-vs) 15) (system::mf (lisp::quote system::break-local) 16) (system::mf (lisp::quote system::break-bds) 17) (system::mf (lisp::quote system::simple-backtrace) 18) (system::mf (lisp::quote system::ihs-backtrace) 19) (system::mfsfun (lisp::quote system::print-ihs) 20 1) (system::mfsfun (lisp::quote system::print-frs) 21 1) (system::mfsfun (lisp::quote system::frs-kind) 22 1) (system::mf (lisp::quote system::break-current) 23) (system::*make-special (lisp::quote system::*break-hidden-packages*)) (lisp::or (lisp::boundp (lisp::quote system::*break-hidden-packages*)) (lisp::setq system::*break-hidden-packages* lisp::nil)) (system::mfsfun (lisp::quote system::ihs-visible) 24 1) (system::mf (lisp::quote system::ihs-fname) 25) (system::mf (lisp::quote system::ihs-not-interpreted-env) 26) (system::mfsfun (lisp::quote system::set-env) 27 0) (system::mfsfun (lisp::quote system::list-delq) 28 2) (system::mfsfun (lisp::quote system::super-go) 29 2) (system::mfsfun (lisp::quote system::break-backward-search-stack) 30 1) (system::mfsfun (lisp::quote system::break-forward-search-stack) 31 1) (system::putprop :b (lisp::quote system::simple-backtrace) (lisp::quote system::break-command)) (system::putprop :r (lisp::quote (lisp::lambda lisp::nil :resume)) (lisp::quote system::break-command)) (system::putprop :resume (lisp::get :r (lisp::quote system::break-command)) (lisp::quote system::break-command)) (system::putprop :bds (lisp::quote system::break-bds) (lisp::quote system::break-command)) (system::putprop :blocks (lisp::quote system::break-blocks) (lisp::quote system::break-command)) (system::putprop :bs (lisp::quote system::break-backward-search-stack) (lisp::quote system::break-command)) (system::putprop :c (lisp::quote system::break-current) (lisp::quote system::break-command)) (system::putprop :fs (lisp::quote system::break-forward-search-stack) (lisp::quote system::break-command)) (system::putprop :functions (lisp::quote system::break-functions) (lisp::quote system::break-command)) (system::putprop :go (lisp::quote system::break-go) (lisp::quote system::break-command)) (system::putprop :h (lisp::quote system::break-help) (lisp::quote system::break-command)) (system::putprop :help (lisp::quote system::break-help) (lisp::quote system::break-command)) (system::putprop :ihs (lisp::quote system::ihs-backtrace) (lisp::quote system::break-command)) (system::putprop :env (lisp::quote (lisp::lambda lisp::nil (system::describe-environment system::*break-env*))) (lisp::quote system::break-command)) (system::putprop :m (lisp::quote system::break-message) (lisp::quote system::break-command)) (system::putprop :n (lisp::quote system::break-next) (lisp::quote system::break-command)) (system::putprop :p (lisp::quote system::break-previous) (lisp::quote system::break-command)) (system::putprop :q (lisp::quote system::break-quit) (lisp::quote system::break-command)) (system::putprop :s (lisp::quote system::break-backward-search-stack) (lisp::quote system::break-command)) (system::putprop :vs (lisp::quote system::break-vs) (lisp::quote system::break-command)) (system::mfsfun (lisp::quote system::break-help) 32 0))))
)
