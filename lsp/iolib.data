       
#(#! 
(lisp::in-package (lisp::quote user::lisp))#! 
(lisp::export (lisp::quote (lisp::with-open-stream lisp::with-input-from-string lisp::with-output-to-string)))#! 
(lisp::export (lisp::quote (lisp::read-from-string)))#! 
(lisp::export (lisp::quote (lisp::write-to-string lisp::prin1-to-string lisp::princ-to-string)))#! 
(lisp::export (lisp::quote lisp::with-open-file))#! 
(lisp::export (lisp::quote (lisp::y-or-n-p lisp::yes-or-no-p)))#! 
(lisp::export (lisp::quote lisp::dribble))#! 
(lisp::in-package (lisp::quote lisp::system))
#(lisp::let lisp::unwind-protect lisp::progn lisp::close lisp::make-string-input-stream lisp::setf system::get-string-input-stream-index system::make-string-output-stream-from-string (lisp::make-string-output-stream) lisp::get-output-stream-string :stream lisp::open lisp::*query-io* "~&~?  (Y or N) " "Y" "N" "~&~?  (Yes or No) " "YES" "NO" lisp::*read-suppress* :initial-contents "DRIBBLE.LOG" :supersede system::*dribble-stream* "Not in dribble." system::*dribble-io* lisp::*terminal-io* system::*dribble-saved-terminal-io* "*TERMINAL-IO* was rebound while DRIBBLE is on.~%~
                   You may miss some dribble output." "~&Finished dribbling to ~A." system::*dribble-namestring* "Already in dribble (to ~A)." :direction :output :if-exists :if-does-not-exist :create "~&Starts dribbling to ~A (~d/~d/~d, ~d:~d:~d)." system::find-declarations :index :start :end :preserve-whitespace lisp::read-preserving-whitespace :escape :radix :base :circle :pretty :level :length :case :gensym :array lisp::make-string-output-stream lisp::make-array lisp::warn lisp::get-decoded-time (system::%init . #((system::warn-version 0) (lisp::proclaim (lisp::quote (lisp::optimize (lisp::safety 2) (lisp::space 3)))) (system::mm (lisp::quote lisp::with-open-stream) 0) (system::mm (lisp::quote lisp::with-input-from-string) 1) (system::mm (lisp::quote lisp::with-output-to-string) 2) (system::mf (lisp::quote lisp::read-from-string) 3) (system::mf (lisp::quote lisp::write-to-string) 4) (system::mf (lisp::quote lisp::prin1-to-string) 5) (system::mf (lisp::quote lisp::princ-to-string) 6) (system::mm (lisp::quote lisp::with-open-file) 7) (system::mfvfun (lisp::quote lisp::y-or-n-p) 8 16384) (system::mfvfun (lisp::quote lisp::yes-or-no-p) 9 16384) (system::mfsfun (lisp::quote system::sharp-a-reader) 10 3) (lisp::set-dispatch-macro-character #\# #\a (lisp::quote system::sharp-a-reader)) (lisp::set-dispatch-macro-character #\# #\A (lisp::quote system::sharp-a-reader)) (lisp::set-dispatch-macro-character #\# #\s (lisp::quote system::sharp-s-reader)) (lisp::set-dispatch-macro-character #\# #\S (lisp::quote system::sharp-s-reader)) (system::*make-special (lisp::quote system::*dribble-stream*)) (lisp::or (lisp::boundp (lisp::quote system::*dribble-stream*)) (lisp::setq system::*dribble-stream* lisp::nil)) (system::*make-special (lisp::quote system::*dribble-io*)) (lisp::or (lisp::boundp (lisp::quote system::*dribble-io*)) (lisp::setq system::*dribble-io* lisp::nil)) (system::*make-special (lisp::quote system::*dribble-namestring*)) (lisp::or (lisp::boundp (lisp::quote system::*dribble-namestring*)) (lisp::setq system::*dribble-namestring* lisp::nil)) (system::*make-special (lisp::quote system::*dribble-saved-terminal-io*)) (lisp::or (lisp::boundp (lisp::quote system::*dribble-saved-terminal-io*)) (lisp::setq system::*dribble-saved-terminal-io* lisp::nil)) (system::mfvfun (lisp::quote lisp::dribble) 11 512))))
)
