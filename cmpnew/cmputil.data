       
#(#! 
(lisp::in-package (lisp::quote user::compiler))#! 
(lisp::export (lisp::quote (compiler::*suppress-compiler-warnings* compiler::*suppress-compiler-notes* compiler::*compiler-break-enable*)))
#(lisp::when compiler::*safe-compile* :upcase lisp::*print-case* "~&;;; " compiler::*error-count* lisp::nil compiler::*cmperr-tag* lisp::if compiler::cmperr ";;; ~S requires at most ~R argument~:p, ~
          but ~R ~:*~[were~;was~:;were~] supplied.~%" ";;; ~S requires at least ~R argument~:p, ~
          but only ~R ~:*~[were~;was~:;were~] supplied.~%" compiler::*suppress-compiler-warnings* ";; Warning: " compiler::*suppress-compiler-notes* ";; Note: " compiler::*first-error* compiler::*current-form* system::|#,| "; #,~s is being compiled.~%" lisp::*print-length* lisp::*print-level* "; ~s is being compiled.~%" ";; The variable ~s is undefined.~%~
           ;; The compiler will assume this variable is a global.~%" ";;; A bug was found in the compiler.  Contact Taiichi.~%" lisp::do* lisp::cdr lisp::car lisp::endp lisp::declare lisp::object lisp::1+ lisp::>= lisp::fixnum lisp::eval lisp::quote ";;; The form ~s was not evaluated successfully.~%~
                  ;;; You are recommended to compile again.~%" compiler::*funs* lisp::macro lisp::macroexpand ";;; The macro form ~s was not expanded successfully.~%" lisp::error "Macro-expansion of ~s failed at compile time." lisp::macroexpand-1 ";;; The macro form ~s was not expanded successfully.~%" "Macro-expansion of ~s failed at compile time." compiler::*record-call-info* lisp::funcall lisp::*macroexpand-hook* ";;; The macro form (~s ...) was not expanded successfully.~%" "Macro-expansion of ~s failed at compile time." system::*ihs-base* system::*ihs-top* lisp::*break-enable* compiler::*compiler-break-enable* system::*break-hidden-packages* compiler::compiler compiler::compiler-prop compiler::print-current-form lisp::break compiler::cmp-toplevel-eval compiler::add-macro-callee system::ihs-top system::error-set compiler::compiler-def-hook (system::%init . #((system::warn-version 0) (system::mm (lisp::quote compiler::safe-compile) 0) (system::*make-special (lisp::quote compiler::*current-form*)) (lisp::or (lisp::boundp (lisp::quote compiler::*current-form*)) (lisp::setq compiler::*current-form* (lisp::quote compiler::|compiler preprocess|))) (system::*make-special (lisp::quote compiler::*first-error*)) (lisp::or (lisp::boundp (lisp::quote compiler::*first-error*)) (lisp::setq compiler::*first-error* lisp::t)) (system::*make-special (lisp::quote compiler::*error-count*)) (lisp::or (lisp::boundp (lisp::quote compiler::*error-count*)) (lisp::setq compiler::*error-count* 0)) (system::*make-constant (lisp::quote compiler::*cmperr-tag*) (lisp::cons lisp::nil lisp::nil)) (system::setvv 6 compiler::*cmperr-tag*) (system::mfvfun (lisp::quote compiler::cmperr) 1 16385) (system::mm (lisp::quote compiler::cmpck) 2) (system::mfsfun (lisp::quote compiler::too-many-args) 3 3) (system::mfsfun (lisp::quote compiler::too-few-args) 4 3) (system::*make-special (lisp::quote compiler::*suppress-compiler-warnings*)) (lisp::or (lisp::boundp (lisp::quote compiler::*suppress-compiler-warnings*)) (lisp::setq compiler::*suppress-compiler-warnings* lisp::nil)) (system::mfvfun (lisp::quote compiler::cmpwarn) 5 16385) (system::*make-special (lisp::quote compiler::*suppress-compiler-notes*)) (lisp::or (lisp::boundp (lisp::quote compiler::*suppress-compiler-notes*)) (lisp::setq compiler::*suppress-compiler-notes* lisp::nil)) (system::mfvfun (lisp::quote compiler::cmpnote) 6 16385) (system::mfsfun (lisp::quote compiler::print-current-form) 7 0) (system::mfsfun (lisp::quote compiler::undefined-variable) 8 1) (system::mfsfun (lisp::quote compiler::baboon) 9 0) (system::mm (lisp::quote compiler::dolist*) 10) (system::mm (lisp::quote compiler::dolist**) 11) (system::mm (lisp::quote compiler::dotimes*) 12) (system::mm (lisp::quote compiler::dotimes**) 13) (system::mf (lisp::quote compiler::cmp-eval) 14) (system::mfsfun (lisp::quote compiler::cmp-macroexpand) 15 1) (system::mfsfun (lisp::quote compiler::cmp-macroexpand-1) 16 1) (system::mfsfun (lisp::quote compiler::cmp-expand-macro) 17 3) (system::*make-special (lisp::quote compiler::*compiler-break-enable*)) (lisp::or (lisp::boundp (lisp::quote compiler::*compiler-break-enable*)) (lisp::setq compiler::*compiler-break-enable* lisp::nil)) (system::mf (lisp::quote compiler::cmp-toplevel-eval) 18) (lisp::block lisp::nil (lisp::let* ((#0=#:g1076 (lisp::quote (system::cdefn compiler::lfun compiler::inline-safe compiler::inline-unsafe compiler::inline-always compiler::c1conditional compiler::c2 compiler::c1 compiler::c1+ compiler::co1 system::structure-access compiler::co1special compiler::top-level-macro compiler::t3 compiler::t2 compiler::t1 compiler::package-operation))) (compiler::v (lisp::car #0#))) (lisp::tagbody #1=#:g1077 (lisp::if (lisp::endp #0#) (lisp::return (lisp::progn lisp::nil))) (lisp::tagbody (system::putprop compiler::v lisp::t (lisp::quote compiler::compiler-prop))) (lisp::setq #0# (lisp::cdr #0#) compiler::v (lisp::car #0#)) (lisp::go #1#)))) (system::mfsfun (lisp::quote compiler::compiler-def-hook) 19 2) (system::mfsfun (lisp::quote compiler::compiler-clear-compiler-properties) 20 2))))
)
